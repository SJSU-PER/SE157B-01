package book;

import javax.swing.JOptionPane;
import org.hibernate.QueryException;

/**
 @author Team Cosmos:
         Erni Ali,
         Phil Vaca,
         Randy Zaatri

 Solution for CS157B Project #1
 Form.java is a class that handles the GUI version of the application.
 */
public class Form extends javax.swing.JFrame
{

    private static final String HELP_MESSAGE =
        "*** Commands: create, load, find <n>, add, delete, quit\n"+
        "***           books, authors, publishers, genres";

    public Form()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      buttonGroup1 = new javax.swing.ButtonGroup();
      buttonGroup2 = new javax.swing.ButtonGroup();
      jLabel1 = new javax.swing.JLabel();
      jRadioButton1 = new javax.swing.JRadioButton();
      jRadioButton2 = new javax.swing.JRadioButton();
      jRadioButton3 = new javax.swing.JRadioButton();
      jRadioButton4 = new javax.swing.JRadioButton();
      jLabel2 = new javax.swing.JLabel();
      jButton1 = new javax.swing.JButton();
      jScrollPane1 = new javax.swing.JScrollPane();
      jTextArea1 = new javax.swing.JTextArea();
      jLabel3 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      jRadioButton5 = new javax.swing.JRadioButton();
      jRadioButton6 = new javax.swing.JRadioButton();
      jLabel5 = new javax.swing.JLabel();
      jLabel6 = new javax.swing.JLabel();
      jLabel7 = new javax.swing.JLabel();
      jTextField3 = new javax.swing.JTextField();
      jLabel8 = new javax.swing.JLabel();
      jComboBox1 = new javax.swing.JComboBox();
      jComboBox2 = new javax.swing.JComboBox();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

      jLabel1.setText("Library Query System");

      buttonGroup1.add(jRadioButton1);
      jRadioButton1.setText("Authors");
      jRadioButton1.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jRadioButton1ActionPerformed(evt);
         }
      });

      buttonGroup1.add(jRadioButton2);
      jRadioButton2.setText("Publishers");
      jRadioButton2.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jRadioButton2ActionPerformed(evt);
         }
      });

      buttonGroup1.add(jRadioButton3);
      jRadioButton3.setText("Books");
      jRadioButton3.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jRadioButton3ActionPerformed(evt);
         }
      });

      buttonGroup1.add(jRadioButton4);
      jRadioButton4.setText("Genres");
      jRadioButton4.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jRadioButton4ActionPerformed(evt);
         }
      });

      jLabel2.setText("Query By:");

      jButton1.setText("Query");
      jButton1.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButton1ActionPerformed(evt);
         }
      });

      jTextArea1.setColumns(20);
      jTextArea1.setRows(5);
      jScrollPane1.setViewportView(jTextArea1);

      jLabel3.setText("Output:");

      jLabel4.setText("Sort By:");

      buttonGroup2.add(jRadioButton5);
      jRadioButton5.setText("Ascending");

      buttonGroup2.add(jRadioButton6);
      jRadioButton6.setText("Descending");

      jLabel5.setText("Attribute:");

      jLabel6.setText("Search By:");

      jLabel7.setText("Attribute:");

      jLabel8.setText("Value:");

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jRadioButton4)
                     .addComponent(jRadioButton3)
                     .addComponent(jRadioButton2)
                     .addComponent(jRadioButton1)
                     .addComponent(jLabel2)
                     .addComponent(jButton1))
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(jRadioButton6)
                           .addGroup(layout.createSequentialGroup()
                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                 .addComponent(jLabel4)
                                 .addComponent(jRadioButton5))
                              .addGap(130, 130, 130)
                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                 .addComponent(jLabel6)
                                 .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                       .addComponent(jLabel7)
                                       .addComponent(jLabel8))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                       .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                       .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                           .addGroup(layout.createSequentialGroup()
                              .addComponent(jLabel5)
                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                              .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 376, Short.MAX_VALUE))
                     .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(jScrollPane1)
                           .addGroup(layout.createSequentialGroup()
                              .addComponent(jLabel3)
                              .addGap(0, 793, Short.MAX_VALUE))))))
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jLabel1)
                  .addGap(27, 27, 27))))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel1)
            .addGap(23, 23, 23)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel2)
               .addComponent(jLabel4)
               .addComponent(jLabel6))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton1)
               .addComponent(jRadioButton5)
               .addComponent(jLabel7)
               .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton2)
               .addComponent(jRadioButton6)
               .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel8))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jRadioButton3)
               .addComponent(jLabel5)
               .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jRadioButton4)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jButton1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
            .addComponent(jLabel3)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
      );

      jLabel1.getAccessibleContext().setAccessibleName("jLabel1");

      pack();
   }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        //----------------------Author---------------------------------------------------------------
        try {
        if (jRadioButton1.isSelected())
        {
            //If Ascending is selected and attribute to ascend by is specified
            if (jRadioButton5.isSelected() && jComboBox1.getSelectedIndex() > 0)
            {
                //Sort All Authors
                if (jComboBox2.getSelectedIndex() == 0 || jTextField3.getText().isEmpty())
                {
                    jTextArea1.setText(Author.getList(true, (String)jComboBox1.getSelectedItem(), null, null));
                }

                //Sort Authors that fall under the query
                else
                {
                    jTextArea1.setText(Author.getList(true, (String)jComboBox1.getSelectedItem(), (String)jComboBox2.getSelectedItem(), jTextField3.getText()));
                }
            }

            //If Descending is selected and attribute to descend by is specified
            else if (jRadioButton6.isSelected() && jComboBox1.getSelectedIndex() > 0)
            {
                //Sort All Authors
                if (jComboBox2.getSelectedIndex() == 0 || jTextField3.getText().isEmpty())
                {
                    jTextArea1.setText(Author.getList(false, (String)jComboBox1.getSelectedItem(), null, null));
                }

                //Sort Authors that fall under the query
                else
                {
                    jTextArea1.setText(Author.getList(false, (String)jComboBox1.getSelectedItem(), (String)jComboBox2.getSelectedItem(), jTextField3.getText()));
                }
            }


            else if (!jRadioButton5.isSelected() && !jRadioButton6.isSelected() || jComboBox1.getSelectedIndex() == 0)
            {
                //Show authors that fall under query, but no sorting specified
                if (jComboBox2.getSelectedIndex() > 0 && !jTextField3.getText().isEmpty())
                {
                    jTextArea1.setText(Author.getList(false, null, (String)jComboBox2.getSelectedItem(), jTextField3.getText()));
                }
                //Show all authors
                else
                {
                    jTextArea1.setText(Author.getList());
                }
            }

        }

        //----------------------Publisher--------------------------
        else if(jRadioButton2.isSelected())
        {
            //If Ascending is selected and attribute to ascend by is specified
            if (jRadioButton5.isSelected() && jComboBox1.getSelectedIndex() > 0)
            {
                //Sort All Publishers
                if (jComboBox2.getSelectedIndex() == 0 || jTextField3.getText().isEmpty())
                {
                    jTextArea1.setText(Publisher.getList(true, (String)jComboBox1.getSelectedItem(), null, null));
                }

                //Sort Publishers that fall under the query
                else
                {
                    jTextArea1.setText(Publisher.getList(true, (String)jComboBox1.getSelectedItem(), (String)jComboBox2.getSelectedItem(), jTextField3.getText()));
                }
            }

            //If Descending is selected and attribute to descend by is specified
            else if (jRadioButton6.isSelected() && jComboBox1.getSelectedIndex() > 0)
            {
                //Sort All Publishers
                if (jComboBox2.getSelectedIndex() == 0 || jTextField3.getText().isEmpty())
                {
                    jTextArea1.setText(Publisher.getList(false, (String)jComboBox1.getSelectedItem(), null, null));
                }

                //Sort Publishers that fall under the query
                else
                {
                    jTextArea1.setText(Publisher.getList(false, (String)jComboBox1.getSelectedItem(), (String)jComboBox2.getSelectedItem(), jTextField3.getText()));
                }
            }


            else if (!jRadioButton5.isSelected() && !jRadioButton6.isSelected() || jComboBox1.getSelectedIndex() == 0)
            {
                //Show publishers that fall under query, but no sorting specified
                if (jComboBox2.getSelectedIndex() > 0 && !jTextField3.getText().isEmpty())
                {
                    jTextArea1.setText(Publisher.getList(false, null, (String)jComboBox2.getSelectedItem(), jTextField3.getText()));
                }
                //Show all publishers
                else
                {
                    jTextArea1.setText(Publisher.getList());
                }
            }
        }

        //----------------------Book--------------------------
        else if(jRadioButton3.isSelected())
        {
            //If Ascending is selected and attribute to ascend by is specified
            if (jRadioButton5.isSelected() && jComboBox1.getSelectedIndex() > 0)
            {
                //Sort All Books
                if (jComboBox2.getSelectedIndex() == 0 || jTextField3.getText().isEmpty())
                {
                    jTextArea1.setText(Book.getList(true, (String)jComboBox1.getSelectedItem(), null, null));
                }

                //Sort Books that fall under the query
                else
                {
                    jTextArea1.setText(Book.getList(true, (String)jComboBox1.getSelectedItem(), (String)jComboBox2.getSelectedItem(), jTextField3.getText()));
                }
            }

            //If Descending is selected and attribute to descend by is specified
            else if (jRadioButton6.isSelected() && jComboBox1.getSelectedIndex() > 0)
            {
                //Sort All Books
                if (jComboBox2.getSelectedIndex() == 0 || jTextField3.getText().isEmpty())
                {
                    jTextArea1.setText(Book.getList(false, (String)jComboBox1.getSelectedItem(), null, null));
                }

                //Sort Books that fall under the query
                else
                {
                    jTextArea1.setText(Book.getList(false, (String)jComboBox1.getSelectedItem(), (String)jComboBox2.getSelectedItem(), jTextField3.getText()));
                }
            }


            else if (!jRadioButton5.isSelected() && !jRadioButton6.isSelected() || jComboBox1.getSelectedIndex() == 0)
            {
                //Show authors that fall under query, but no sorting specified
                if (jComboBox2.getSelectedIndex() > 0 && !jTextField3.getText().isEmpty())
                {
                    jTextArea1.setText(Book.getList(false, null, (String)jComboBox2.getSelectedItem(), jTextField3.getText()));
                }
                //Show all authors
                else
                {
                    jTextArea1.setText(Book.getList());
                }
            }
        }

        //----------------------Genre--------------------------
        else if(jRadioButton4.isSelected())
        {
            //If Ascending is selected and attribute to ascend by is specified
            if (jRadioButton5.isSelected() && jComboBox1.getSelectedIndex() > 0)
            {
                //Sort All Genres
                if (jComboBox2.getSelectedIndex() == 0 || jTextField3.getText().isEmpty())
                {
                    jTextArea1.setText(Genre.getList(true, (String)jComboBox1.getSelectedItem(), null, null));
                }

                //Sort Genres that fall under the query
                else
                {
                    jTextArea1.setText(Genre.getList(true, (String)jComboBox1.getSelectedItem(), (String)jComboBox2.getSelectedItem(), jTextField3.getText()));
                }
            }

            //If Descending is selected and attribute to descend by is specified
            else if (jRadioButton6.isSelected() && jComboBox1.getSelectedIndex() > 0)
            {
                //Sort All Genres
                if (jComboBox2.getSelectedIndex() == 0 || jTextField3.getText().isEmpty())
                {
                    jTextArea1.setText(Genre.getList(false, (String)jComboBox1.getSelectedItem(), null, null));
                }

                //Sort Genres that fall under the query
                else
                {
                    jTextArea1.setText(Genre.getList(false, (String)jComboBox1.getSelectedItem(), (String)jComboBox2.getSelectedItem(), jTextField3.getText()));
                }
            }


            else if (!jRadioButton5.isSelected() && !jRadioButton6.isSelected() || jComboBox1.getSelectedIndex() == 0)
            {
                //Show Genres that fall under query, but no sorting specified
                if (jComboBox2.getSelectedIndex() > 0 && !jTextField3.getText().isEmpty())
                {
                    jTextArea1.setText(Genre.getList(false, null, (String)jComboBox2.getSelectedItem(), jTextField3.getText()));
                }
                //Show all Genres
                else
                {
                    jTextArea1.setText(Genre.getList());
                }
            }
        }}
        catch(QueryException ex)
        {

            JOptionPane.showMessageDialog(rootPane, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

   private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButton1ActionPerformed
   {//GEN-HEADEREND:event_jRadioButton1ActionPerformed
      //if Author is selected
      if(jRadioButton1.isSelected())
      {
         jComboBox1.setEditable(true);
         jComboBox1.removeAllItems();
         jComboBox1.addItem("");
         jComboBox1.addItem("id");
         jComboBox1.addItem("firstname");
         jComboBox1.addItem("lastname");

         jComboBox2.setEditable(true);
         jComboBox2.removeAllItems();
         jComboBox2.addItem("");
         jComboBox2.addItem("firstname");
         jComboBox2.addItem("lastname");
      }
   }//GEN-LAST:event_jRadioButton1ActionPerformed

   private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButton2ActionPerformed
   {//GEN-HEADEREND:event_jRadioButton2ActionPerformed
      //If Publishers is selected
      if(jRadioButton2.isSelected())
      {
         jComboBox1.setEditable(true);
         jComboBox1.removeAllItems();
         jComboBox1.addItem("");
         jComboBox1.addItem("id");
         jComboBox1.addItem("name");

         jComboBox2.setEditable(true);
         jComboBox2.removeAllItems();
         jComboBox2.addItem("");
         jComboBox2.addItem("name");
      }
   }//GEN-LAST:event_jRadioButton2ActionPerformed

   private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButton3ActionPerformed
   {//GEN-HEADEREND:event_jRadioButton3ActionPerformed
      //if books is selected
      if(jRadioButton3.isSelected())
      {
         jComboBox1.setEditable(true);
         jComboBox1.removeAllItems();
         jComboBox1.addItem("");
         jComboBox1.addItem("id");
         jComboBox1.addItem("publishedDate");
         jComboBox1.addItem("title");

         jComboBox2.setEditable(true);
         jComboBox2.removeAllItems();
         jComboBox2.addItem("");
         jComboBox2.addItem("publishedDate");
         jComboBox2.addItem("title");
      }
   }//GEN-LAST:event_jRadioButton3ActionPerformed

   private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jRadioButton4ActionPerformed
   {//GEN-HEADEREND:event_jRadioButton4ActionPerformed
      //if genres is selected
      if(jRadioButton4.isSelected())
      {
         jComboBox1.setEditable(true);
         jComboBox1.removeAllItems();
         jComboBox1.addItem("");
         jComboBox1.addItem("id");
         jComboBox1.addItem("genreName");

         jComboBox2.setEditable(true);
         jComboBox2.removeAllItems();
         jComboBox2.addItem("");
         jComboBox2.addItem("genreName");
      }
   }//GEN-LAST:event_jRadioButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
        BufferedReader stdin =
                new BufferedReader(new InputStreamReader(System.in));
        String command;
        */

        Class klasses[] = {Book.class, Publisher.class, ISBN.class,
                           Author.class, Genre.class};

        HibernateContext.addClasses(klasses);
        HibernateContext.createSchema();

        Publisher.load();
        Author.load();
        Genre.load();
        Book.load();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Form().setVisible(true);
            }
        });
    }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.ButtonGroup buttonGroup2;
   private javax.swing.JButton jButton1;
   private javax.swing.JComboBox jComboBox1;
   private javax.swing.JComboBox jComboBox2;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JLabel jLabel8;
   private javax.swing.JRadioButton jRadioButton1;
   private javax.swing.JRadioButton jRadioButton2;
   private javax.swing.JRadioButton jRadioButton3;
   private javax.swing.JRadioButton jRadioButton4;
   private javax.swing.JRadioButton jRadioButton5;
   private javax.swing.JRadioButton jRadioButton6;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JTextArea jTextArea1;
   private javax.swing.JTextField jTextField3;
   // End of variables declaration//GEN-END:variables
}

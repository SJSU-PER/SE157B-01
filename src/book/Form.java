package book;

import javax.swing.JOptionPane;
import org.hibernate.QueryException;

/**
 @author Team Cosmos:
         Erni Ali,
         Phil Vaca,
         Randy Zaatri

 Solution for CS157B Project #1
 Form.java is a class that handles the GUI version of the application.
 */
public class Form extends javax.swing.JFrame
{
    public Form()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      buttonGroup1 = new javax.swing.ButtonGroup();
      buttonGroup2 = new javax.swing.ButtonGroup();
      libTitle = new javax.swing.JLabel();
      authorRadButton = new javax.swing.JRadioButton();
      publisherRadButton = new javax.swing.JRadioButton();
      bookRadButton = new javax.swing.JRadioButton();
      genreRadButton = new javax.swing.JRadioButton();
      queryByLabel = new javax.swing.JLabel();
      queryButton = new javax.swing.JButton();
      jScrollPane1 = new javax.swing.JScrollPane();
      resultArea = new javax.swing.JTextArea();
      outputLabel = new javax.swing.JLabel();
      sortByLabel = new javax.swing.JLabel();
      sortAscRadButton = new javax.swing.JRadioButton();
      sortDescRadButton = new javax.swing.JRadioButton();
      sortAttrLabel = new javax.swing.JLabel();
      searchByLabel = new javax.swing.JLabel();
      searchAttrLabel = new javax.swing.JLabel();
      searchValue = new javax.swing.JTextField();
      searchValueLabel = new javax.swing.JLabel();
      sortAttr = new javax.swing.JComboBox();
      searchAttr = new javax.swing.JComboBox();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

      libTitle.setText("Library Query System");

      buttonGroup1.add(authorRadButton);
      authorRadButton.setText("Authors");
      authorRadButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            authorRadButtonActionPerformed(evt);
         }
      });

      buttonGroup1.add(publisherRadButton);
      publisherRadButton.setText("Publishers");
      publisherRadButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            publisherRadButtonActionPerformed(evt);
         }
      });

      buttonGroup1.add(bookRadButton);
      bookRadButton.setText("Books");
      bookRadButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            bookRadButtonActionPerformed(evt);
         }
      });

      buttonGroup1.add(genreRadButton);
      genreRadButton.setText("Genres");
      genreRadButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            genreRadButtonActionPerformed(evt);
         }
      });

      queryByLabel.setText("Query By:");

      queryButton.setText("Query");
      queryButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            queryButtonActionPerformed(evt);
         }
      });

      resultArea.setColumns(20);
      resultArea.setRows(5);
      jScrollPane1.setViewportView(resultArea);

      outputLabel.setText("Output:");

      sortByLabel.setText("Sort By:");

      buttonGroup2.add(sortAscRadButton);
      sortAscRadButton.setText("Ascending");

      buttonGroup2.add(sortDescRadButton);
      sortDescRadButton.setText("Descending");

      sortAttrLabel.setText("Attribute:");

      searchByLabel.setText("Search By:");

      searchAttrLabel.setText("Attribute:");

      searchValueLabel.setText("Value:");

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(genreRadButton)
                     .addComponent(bookRadButton)
                     .addComponent(publisherRadButton)
                     .addComponent(authorRadButton)
                     .addComponent(queryByLabel)
                     .addComponent(queryButton))
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(sortDescRadButton)
                           .addGroup(layout.createSequentialGroup()
                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                 .addComponent(sortByLabel)
                                 .addComponent(sortAscRadButton))
                              .addGap(130, 130, 130)
                              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                 .addComponent(searchByLabel)
                                 .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                       .addComponent(searchAttrLabel)
                                       .addComponent(searchValueLabel))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                       .addComponent(searchValue, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                       .addComponent(searchAttr, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                           .addGroup(layout.createSequentialGroup()
                              .addComponent(sortAttrLabel)
                              .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                              .addComponent(sortAttr, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 376, Short.MAX_VALUE))
                     .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(jScrollPane1)
                           .addGroup(layout.createSequentialGroup()
                              .addComponent(outputLabel)
                              .addGap(0, 793, Short.MAX_VALUE))))))
               .addGroup(layout.createSequentialGroup()
                  .addComponent(libTitle)
                  .addGap(27, 27, 27))))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(libTitle)
            .addGap(23, 23, 23)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(queryByLabel)
               .addComponent(sortByLabel)
               .addComponent(searchByLabel))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(authorRadButton)
               .addComponent(sortAscRadButton)
               .addComponent(searchAttrLabel)
               .addComponent(searchAttr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(publisherRadButton)
               .addComponent(sortDescRadButton)
               .addComponent(searchValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(searchValueLabel))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(bookRadButton)
               .addComponent(sortAttrLabel)
               .addComponent(sortAttr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(genreRadButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(queryButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
            .addComponent(outputLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
      );

      libTitle.getAccessibleContext().setAccessibleName("jLabel1");

      pack();
   }// </editor-fold>//GEN-END:initComponents

    private void queryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queryButtonActionPerformed

        //----------------------Author---------------------------------------------------------------
        try {
        if (authorRadButton.isSelected())
        {
            //If Ascending is selected and attribute to ascend by is specified
            if (sortAscRadButton.isSelected()
                    && sortAttr.getSelectedIndex() > 0)
            {
                //If selection not specified, sort all authors with no selection
                if (searchAttr.getSelectedIndex() == 0
                        || searchValue.getText().isEmpty())
                {
                    resultArea.setText(Author.getList(true,
                            (String)sortAttr.getSelectedItem(), null, null));
                }

                //If selection specified, sort all authors with specification
                else
                {
                    resultArea.setText(Author.getList(true,
                            (String)sortAttr.getSelectedItem(),
                            (String)searchAttr.getSelectedItem(),
                            searchValue.getText()));
                }
            }

            //If Descending is selected and attribute to descend by is specified
            else if (sortDescRadButton.isSelected()
                    && sortAttr.getSelectedIndex() > 0)
            {
                //If selection not specified, sort all authors with no selection
                if (searchAttr.getSelectedIndex() == 0
                        || searchValue.getText().isEmpty())
                {
                    resultArea.setText(Author.getList(false,
                            (String)sortAttr.getSelectedItem(), null, null));
                }

                //If selection specified, sort all authors with specification
                else
                {
                    resultArea.setText(Author.getList(false,
                            (String)sortAttr.getSelectedItem(),
                            (String)searchAttr.getSelectedItem(),
                            searchValue.getText()));
                }
            }

            //If neither ascending/descending and attribute not specified
            else if (!sortAscRadButton.isSelected()
                    && !sortDescRadButton.isSelected()
                    || sortAttr.getSelectedIndex() == 0)
            {
                //Show authors that fall under selection, but no sorting specified
                if (searchAttr.getSelectedIndex() > 0
                        && !searchValue.getText().isEmpty())
                {
                    resultArea.setText(Author.getList(false, null,
                            (String)searchAttr.getSelectedItem(),
                            searchValue.getText()));
                }
                
                //Show authors with no selection or sorting
                else
                {
                    resultArea.setText(Author.getList());
                }
            }

        }

        //----------------------Publisher--------------------------
        else if(publisherRadButton.isSelected())
        {
            //If Ascending is selected and attribute to ascend by is specified
            if (sortAscRadButton.isSelected() && sortAttr.getSelectedIndex() > 0)
            {
                //If selection not specified, sort all publishers with no selection
                if (searchAttr.getSelectedIndex() == 0
                        || searchValue.getText().isEmpty())
                {
                    resultArea.setText(Publisher.getList(true,
                            (String)sortAttr.getSelectedItem(), null, null));
                }

                //If selection specified, sort all publishers with specification
                else
                {
                    resultArea.setText(Publisher.getList(true,
                            (String)sortAttr.getSelectedItem(),
                            (String)searchAttr.getSelectedItem(),
                            searchValue.getText()));
                }
            }

            //If Descending is selected and attribute to descend by is specified
            else if (sortDescRadButton.isSelected()
                    && sortAttr.getSelectedIndex() > 0)
            {
                //If selection not specified, sort all publishers with no selection
                if (searchAttr.getSelectedIndex() == 0
                        || searchValue.getText().isEmpty())
                {
                    resultArea.setText(Publisher.getList(false,
                            (String)sortAttr.getSelectedItem(), null, null));
                }

                //If selection specified, sort all publishers with specification
                else
                {
                    resultArea.setText(Publisher.getList(false,
                            (String)sortAttr.getSelectedItem(),
                            (String)searchAttr.getSelectedItem(),
                            searchValue.getText()));
                }
            }

            //If neither ascending/descending and attribute not specified
            else if (!sortAscRadButton.isSelected()
                    && !sortDescRadButton.isSelected()
                    || sortAttr.getSelectedIndex() == 0)
            {
                //Show publishers that fall under selection, but no sorting specified
                if (searchAttr.getSelectedIndex() > 0
                        && !searchValue.getText().isEmpty())
                {
                    resultArea.setText(Publisher.getList(false, null,
                            (String)searchAttr.getSelectedItem(),
                            searchValue.getText()));
                }
                //Show all publishers with no sorting or selection
                else
                {
                    resultArea.setText(Publisher.getList());
                }
            }
        }

        //----------------------Book--------------------------
        else if(bookRadButton.isSelected())
        {
            //If Ascending is selected and attribute to ascend by is specified
            if (sortAscRadButton.isSelected() && sortAttr.getSelectedIndex() > 0)
            {
                //If selection not specified, sort all books with no selection
                if (searchAttr.getSelectedIndex() == 0 ||
                        searchValue.getText().isEmpty())
                {
                    resultArea.setText(Book.getList(true,
                            (String)sortAttr.getSelectedItem(), null, null));
                }

                //If selection specified, sort all books with specification
                else
                {
                    resultArea.setText(Book.getList(true,
                            (String)sortAttr.getSelectedItem(),
                            (String)searchAttr.getSelectedItem(),
                            searchValue.getText()));
                }
            }

            //If Descending is selected and attribute to descend by is specified
            else if (sortDescRadButton.isSelected()
                    && sortAttr.getSelectedIndex() > 0)
            {
                //If selection not specified, sort all books with no selection
                if (searchAttr.getSelectedIndex() == 0
                        || searchValue.getText().isEmpty())
                {
                    resultArea.setText(Book.getList(false,
                            (String)sortAttr.getSelectedItem(), null, null));
                }

                //If selection specified, sort all books with specification
                else
                {
                    resultArea.setText(Book.getList(false,
                            (String)sortAttr.getSelectedItem(),
                            (String)searchAttr.getSelectedItem(),
                            searchValue.getText()));
                }
            }

            //If neither ascending/descending and attribute not specified
            else if (!sortAscRadButton.isSelected()
                    && !sortDescRadButton.isSelected()
                    || sortAttr.getSelectedIndex() == 0)
            {
                //Show books that fall under selection, but no sorting specified
                if (searchAttr.getSelectedIndex() > 0
                        && !searchValue.getText().isEmpty())
                {
                    resultArea.setText(Book.getList(false, null,
                            (String)searchAttr.getSelectedItem(),
                            searchValue.getText()));
                }
                //Show all books without sorting/selection
                else
                {
                    resultArea.setText(Book.getList());
                }
            }
        }

        //----------------------Genre--------------------------
        else if(genreRadButton.isSelected())
        {
            //If Ascending is selected and attribute to ascend by is specified
            if (sortAscRadButton.isSelected() && sortAttr.getSelectedIndex() > 0)
            {
                //If selection not specified, sort all genres with no selection
                if (searchAttr.getSelectedIndex() == 0 ||
                        searchValue.getText().isEmpty())
                {
                    resultArea.setText(Genre.getList(true,
                            (String)sortAttr.getSelectedItem(), null, null));
                }

                //If selection specified, sort all genres with specification
                else
                {
                    resultArea.setText(Genre.getList(true,
                            (String)sortAttr.getSelectedItem(),
                            (String)searchAttr.getSelectedItem(),
                            searchValue.getText()));
                }
            }

            //If Descending is selected and attribute to descend by is specified
            else if (sortDescRadButton.isSelected()
                    && sortAttr.getSelectedIndex() > 0)
            {
                //If selection not specified, sort all genres with no selection
                if (searchAttr.getSelectedIndex() == 0
                        || searchValue.getText().isEmpty())
                {
                    resultArea.setText(Genre.getList(false,
                            (String)sortAttr.getSelectedItem(), null, null));
                }

                //If selection specified, sort all genres with specification
                else
                {
                    resultArea.setText(Genre.getList(false,
                            (String)sortAttr.getSelectedItem(),
                            (String)searchAttr.getSelectedItem(),
                            searchValue.getText()));
                }
            }

            //If neither ascending/descending and attribute not specified
            else if (!sortAscRadButton.isSelected()
                    && !sortDescRadButton.isSelected()
                    || sortAttr.getSelectedIndex() == 0)
            {
                //Show genres that fall under selection, but no sorting specified
                if (searchAttr.getSelectedIndex() > 0
                        && !searchValue.getText().isEmpty())
                {
                    resultArea.setText(Genre.getList(false, null,
                            (String)searchAttr.getSelectedItem(),
                            searchValue.getText()));
                }
                //Show all Genres without sorting or selection
                else
                {
                    resultArea.setText(Genre.getList());
                }
            }
        }}
        catch(QueryException ex)
        {

            JOptionPane.showMessageDialog(rootPane, ex);
        }
    }//GEN-LAST:event_queryButtonActionPerformed

   private void authorRadButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_authorRadButtonActionPerformed
   {//GEN-HEADEREND:event_authorRadButtonActionPerformed
      //if Author is selected
      if(authorRadButton.isSelected())
      {
         sortAttr.setEditable(true);
         sortAttr.removeAllItems();
         sortAttr.addItem("");
         sortAttr.addItem("id");
         sortAttr.addItem("firstname");
         sortAttr.addItem("lastname");

         searchAttr.setEditable(true);
         searchAttr.removeAllItems();
         searchAttr.addItem("");
         searchAttr.addItem("firstname");
         searchAttr.addItem("lastname");
      }
   }//GEN-LAST:event_authorRadButtonActionPerformed

   private void publisherRadButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_publisherRadButtonActionPerformed
   {//GEN-HEADEREND:event_publisherRadButtonActionPerformed
      //If Publishers is selected
      if(publisherRadButton.isSelected())
      {
         sortAttr.setEditable(true);
         sortAttr.removeAllItems();
         sortAttr.addItem("");
         sortAttr.addItem("id");
         sortAttr.addItem("name");

         searchAttr.setEditable(true);
         searchAttr.removeAllItems();
         searchAttr.addItem("");
         searchAttr.addItem("name");
      }
   }//GEN-LAST:event_publisherRadButtonActionPerformed

   private void bookRadButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bookRadButtonActionPerformed
   {//GEN-HEADEREND:event_bookRadButtonActionPerformed
      //if books is selected
      if(bookRadButton.isSelected())
      {
         sortAttr.setEditable(true);
         sortAttr.removeAllItems();
         sortAttr.addItem("");
         sortAttr.addItem("id");
         sortAttr.addItem("publishedDate");
         sortAttr.addItem("title");

         searchAttr.setEditable(true);
         searchAttr.removeAllItems();
         searchAttr.addItem("");
         searchAttr.addItem("publishedDate");
         searchAttr.addItem("title");
      }
   }//GEN-LAST:event_bookRadButtonActionPerformed

   private void genreRadButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_genreRadButtonActionPerformed
   {//GEN-HEADEREND:event_genreRadButtonActionPerformed
      //if genres is selected
      if(genreRadButton.isSelected())
      {
         sortAttr.setEditable(true);
         sortAttr.removeAllItems();
         sortAttr.addItem("");
         sortAttr.addItem("id");
         sortAttr.addItem("genreName");

         searchAttr.setEditable(true);
         searchAttr.removeAllItems();
         searchAttr.addItem("");
         searchAttr.addItem("genreName");
      }
   }//GEN-LAST:event_genreRadButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        Class klasses[] = {Book.class, Publisher.class, ISBN.class,
                           Author.class, Genre.class};

        HibernateContext.addClasses(klasses);
        HibernateContext.createSchema();

        Publisher.load();
        Author.load();
        Genre.load();
        Book.load();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Form().setVisible(true);
            }
        });
    }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JRadioButton authorRadButton;
   private javax.swing.JRadioButton bookRadButton;
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.ButtonGroup buttonGroup2;
   private javax.swing.JRadioButton genreRadButton;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JLabel libTitle;
   private javax.swing.JLabel outputLabel;
   private javax.swing.JRadioButton publisherRadButton;
   private javax.swing.JButton queryButton;
   private javax.swing.JLabel queryByLabel;
   private javax.swing.JTextArea resultArea;
   private javax.swing.JComboBox searchAttr;
   private javax.swing.JLabel searchAttrLabel;
   private javax.swing.JLabel searchByLabel;
   private javax.swing.JTextField searchValue;
   private javax.swing.JLabel searchValueLabel;
   private javax.swing.JRadioButton sortAscRadButton;
   private javax.swing.JComboBox sortAttr;
   private javax.swing.JLabel sortAttrLabel;
   private javax.swing.JLabel sortByLabel;
   private javax.swing.JRadioButton sortDescRadButton;
   // End of variables declaration//GEN-END:variables
}
